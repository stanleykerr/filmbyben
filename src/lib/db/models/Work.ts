import {
  CreationOptional,
  DataTypes,
  InferAttributes,
  InferCreationAttributes,
  Model,
  ForeignKey,
  NonAttribute,
  Association,
  BelongsToGetAssociationMixin,
  BelongsToSetAssociationMixin,
  BelongsToCreateAssociationMixin,
} from "@sequelize/core";
import { nanoid } from "nanoid";

import { sequelize } from "../sequelize";

import type { WorkCategory } from "../";

export class Work extends Model<
  InferAttributes<Work>,
  InferCreationAttributes<Work>
> {
  declare id: CreationOptional<string>; // id can be undefined during creation (generated by nanoid)
  declare name: string;
  declare link: string | null;
  declare date: Date | null;
  declare private: boolean | null;
  declare hasPreview: boolean | null;
  declare thumbnail: CreationOptional<string>;

  // timestamps
  declare createdAt: CreationOptional<Date>; // createdAt can be undefined during creation
  declare updatedAt: CreationOptional<Date>; // updatedAt can be undefined during creation

  // `category` is an eagerly-loaded association.
  // We tag it as `NonAttribute`
  declare category?: NonAttribute<Work>;

  // foreign keys are automatically added by associations methods (like Project.belongsTo)
  // by branding them using the `ForeignKey` type, `Project.init` will know it does not need to
  // display an error if ownerId is missing.
  declare categoryId: ForeignKey<WorkCategory["id"]>;

  // Since TS cannot determine model association at compile time
  // we have to declare them here purely virtually
  // these will not exist until `Model.init` was called.
  declare getCategory: BelongsToGetAssociationMixin<WorkCategory>; // Note the null assertions!
  declare setCategory: BelongsToSetAssociationMixin<WorkCategory, "id">;
  declare createCategory: BelongsToCreateAssociationMixin<WorkCategory>;

  declare static associations: {
    category: Association<Work, WorkCategory>;
  };
}

Work.init(
  {
    id: {
      type: DataTypes.STRING,
      allowNull: false,
      primaryKey: true,
      unique: true,
      defaultValue: () => nanoid(),
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    link: DataTypes.STRING,
    date: DataTypes.DATE,
    private: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    hasPreview: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    thumbnail: {
      type: DataTypes.STRING,

      // TODO: remove this virtual getter in production, only used for development purposes
      get() {
        return this.getDataValue("link") ?? this.getDataValue("thumbnail");
      },
    },
    createdAt: DataTypes.DATE,
    updatedAt: DataTypes.DATE,
  },
  {
    sequelize,
    modelName: "Work",
  }
);

type YoutubeQuality = "thumb" | "mq" | "hq" | "sd" | "max";

type YoutubeQualityMap = {
  [key in YoutubeQuality]: {
    width: number;
    height: number;
    qid: string;
  };
};

const youtubeQualityMap: YoutubeQualityMap = {
  thumb: {
    width: 120,
    height: 90,
    qid: "",
  },
  mq: {
    width: 320,
    height: 180,
    qid: "mq",
  },
  hq: {
    width: 480,
    height: 360,
    qid: "hq",
  },
  sd: {
    width: 640,
    height: 480,
    qid: "sd",
  },
  max: {
    width: 1280,
    height: 720,
    qid: "maxres",
  },
};

export const generateYoutubeThumbnail = (
  url: string,
  quality: YoutubeQuality = "sd"
) => {
  var regExp =
    /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*/;
  var match = url.match(regExp);
  var id = match && match[7].length == 11 ? match[7] : false;

  let { width, height, qid } = youtubeQualityMap[quality];

  return {
    width,
    height,
    src: `https://img.youtube.com/vi/${id}/${qid}default.jpg`,
  };
};

/* Work.aggregate("category", "DISTINCT", { plain: false });

Work.findAll({
  attributes: [
    [fn("DISTINCT", col("category")), "category"],
  ],
}).then((categories) => {}); */
